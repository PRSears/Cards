using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Networking.Structs
{
    /// <summary>
    /// NetWrapper originator type. Used to track who the Action object originated from.
    /// </summary>
    public struct Originators
    {
        private byte Originator;
        private string Description;

        public static Originators Server { get { return new Originators(0, "Server"); } }
        public static Originators Player1 { get { return new Originators(1, "Player 1"); } }
        public static Originators Player2 { get { return new Originators(2, "Player 2"); } }
        public static Originators Observer { get { return new Originators(10, "Observer"); } }

        private Originators(byte originator, string description)
        {
            Originator = originator;
            Description = description;
        }

        /// <summary>
        /// Attempts to convert a byte into a new Originator struct. 
        /// </summary>
        /// <param name="originator">Single byte representation of Originator. Should only be generated by Originator.ToByte().</param>
        /// <returns>New Originator.</returns>
        public static Originators Parse(byte originator)
        {
            if (originator == Server.Originator)
                return Server;
            if (originator == Player1.Originator)
                return Player1;
            if (originator == Player2.Originator)
                return Player2;
            if (originator == Observer.Originator)
                return Observer;

            throw new FormatException("originator byte is not a valid originator.");
        }

        public override bool Equals(object obj)
        {
            if (this.GetType() != obj.GetType())
                return false;
            Originators other = (Originators)obj;

            return this.Originator.Equals(other.Originator);
        }

        public override string ToString()
        {
            return Description;
        }

        public byte ToByte()
        {
            return Originator;
        }

        public static Boolean operator ==(Originators a, Originators b)
        {
            return a.Equals(b);
        }

        public static Boolean operator !=(Originators a, Originators b)
        {
            return !a.Equals(b);
        }
    }
}
